/// Script de migra√ß√£o de hashes BCrypt para Argon2
/// 
/// ATEN√á√ÉO: Este script requer que voc√™ saiba as senhas dos usu√°rios
/// ou force um reset de senha para todos.
/// 
/// Op√ß√£o 1: Migra√ß√£o autom√°tica no pr√≥ximo login (RECOMENDADO)
/// - O AuthService j√° faz isso automaticamente
/// - Usu√°rios com BCrypt ser√£o migrados ao fazer login
/// 
/// Op√ß√£o 2: For√ßa reset de senha para todos
/// - Use este script para marcar todos usu√°rios para reset

import 'dart:io';
import 'package:sqflite_common_ffi/sqflite_ffi.dart';
import 'package:path/path.dart';
import 'package:path_provider/path_provider.dart' as path_provider;

void main() async {
  print('=== Migra√ß√£o de Hashes BCrypt para Argon2 ===\n');
  
  sqfliteFfiInit();
  final databaseFactory = databaseFactoryFfi;
  
  // Localizar database
  final dir = await path_provider.getApplicationDocumentsDirectory();
  final dbPath = join(dir.path, 'gestao_incidentes.db');
  
  if (!File(dbPath).existsSync()) {
    print('‚ùå Database n√£o encontrada em: $dbPath');
    print('Execute a aplica√ß√£o primeiro para criar a database.');
    exit(1);
  }
  
  print('üìÇ Database: $dbPath\n');
  
  final db = await databaseFactory.openDatabase(dbPath);
  
  // Contar usu√°rios com BCrypt
  final bcryptUsers = await db.rawQuery(
    "SELECT COUNT(*) as count FROM usuarios WHERE hash LIKE '\$2%'"
  );
  final bcryptCount = bcryptUsers.first['count'] as int;
  
  // Contar usu√°rios com Argon2
  final argon2Users = await db.rawQuery(
    "SELECT COUNT(*) as count FROM usuarios WHERE hash LIKE '\$argon2%'"
  );
  final argon2Count = argon2Users.first['count'] as int;
  
  print('üìä Status Atual:');
  print('   - Usu√°rios com BCrypt: $bcryptCount');
  print('   - Usu√°rios com Argon2: $argon2Count');
  print('');
  
  if (bcryptCount == 0) {
    print('‚úÖ Todos os usu√°rios j√° usam Argon2!');
    await db.close();
    exit(0);
  }
  
  print('‚ÑπÔ∏è  OP√á√ïES DE MIGRA√á√ÉO:\n');
  print('1. Migra√ß√£o Autom√°tica (RECOMENDADO)');
  print('   - Os usu√°rios ser√£o migrados automaticamente no pr√≥ximo login');
  print('   - N√£o requer a√ß√£o adicional');
  print('   - J√° est√° implementado no AuthService\n');
  
  print('2. For√ßar Reset de Senha');
  print('   - Adiciona flag require_password_reset para todos usu√°rios BCrypt');
  print('   - Usu√°rios ter√£o que redefinir senha no pr√≥ximo login');
  print('   - Mais seguro se h√° suspeita de comprometimento\n');
  
  stdout.write('Escolha uma op√ß√£o (1 ou 2, Enter para cancelar): ');
  final choice = stdin.readLineSync();
  
  if (choice == '1') {
    print('\n‚úÖ Migra√ß√£o autom√°tica j√° est√° ativa!');
    print('   Quando os usu√°rios fizerem login, seus hashes ser√£o atualizados.');
  } else if (choice == '2') {
    print('\n‚ö†Ô∏è  For√ßando reset de senha para $bcryptCount usu√°rios...');
    
    // Verificar se coluna existe
    final columns = await db.rawQuery("PRAGMA table_info('usuarios')");
    final hasResetColumn = columns.any((col) => col['name'] == 'require_password_reset');
    
    if (!hasResetColumn) {
      print('   Adicionando coluna require_password_reset...');
      await db.execute(
        'ALTER TABLE usuarios ADD COLUMN require_password_reset INTEGER DEFAULT 0'
      );
    }
    
    // Marcar usu√°rios BCrypt para reset
    final updated = await db.rawUpdate(
      "UPDATE usuarios SET require_password_reset = 1 WHERE hash LIKE '\$2%'"
    );
    
    print('   ‚úÖ $updated usu√°rios marcados para reset de senha');
    print('   ‚ÑπÔ∏è  Implemente verifica√ß√£o de require_password_reset na tela de login');
  } else {
    print('\n‚ùå Opera√ß√£o cancelada.');
  }
  
  await db.close();
  
  print('\nüìù PR√ìXIMOS PASSOS:');
  print('   1. Teste o login de um usu√°rio BCrypt');
  print('   2. Verifique logs para confirmar migra√ß√£o');
  print('   3. Monitore progresso da migra√ß√£o gradual');
  print('   4. Ap√≥s 100% Argon2, considere remover suporte a BCrypt\n');
}
