import 'dart:io';
import 'dart:convert';
import 'dart:typed_data';
import 'package:sqflite_common_ffi/sqflite_ffi.dart';
import 'package:path/path.dart';
import 'package:argon2/argon2.dart';

/// Script para popular a base de dados com 6 usu√°rios espec√≠ficos
/// ATEN√á√ÉO: Este script apaga TODOS os usu√°rios existentes!
void main() async {
  print('üîÑ Iniciando popula√ß√£o da base de dados...\n');

  // Inicializar FFI
  sqfliteFfiInit();
  databaseFactory = databaseFactoryFfi;

  // Caminho para a base de dados
  // Tentar m√∫ltiplos caminhos poss√≠veis
  final possiblePaths = [
    join(Platform.environment['USERPROFILE'] ?? '', 'OneDrive', 'Documentos', 'gestao_incidentes.db'),
    join(Platform.environment['USERPROFILE'] ?? '', 'Documents', 'gestao_incidentes.db'),
    join(Platform.environment['HOME'] ?? '', 'Documents', 'gestao_incidentes.db'),
  ];

  String? dbPath;
  for (var path in possiblePaths) {
    if (File(path).existsSync()) {
      dbPath = path;
      break;
    }
  }

  if (dbPath == null) {
    print('‚ùå Base de dados n√£o encontrada!');
    print('   Locais verificados:');
    for (var path in possiblePaths) {
      print('   - $path');
    }
    print('\n   Execute a aplica√ß√£o primeiro para criar a DB.');
    exit(1);
  }

  print('üìÇ Base de dados: $dbPath');

  final db = await openDatabase(dbPath);

  try {
    // 1. LIMPAR usu√°rios existentes
    print('\nüóëÔ∏è  Removendo usu√°rios existentes...');
    final deleted = await db.delete('usuarios');
    print('   ‚úì $deleted usu√°rio(s) removido(s)');

    // 2. Senha padr√£o para todos (atende requisitos de seguran√ßa)
    const senhaComum = 'Senha@123456'; // 12 chars, mai√∫scula, min√∫scula, n√∫mero, especial

    // 3. Criar hash Argon2id para a senha
    print('\nüîê Gerando hash Argon2id...');
    
    final parameters = Argon2Parameters(
      Argon2Parameters.ARGON2_id,  // Argon2id
      utf8.encode('somesalt'),
      version: Argon2Parameters.ARGON2_VERSION_13,
      iterations: 3,
      memory: 65536,  // 64 MB
      lanes: 4,
    );
    
    final argon2 = Argon2BytesGenerator();
    argon2.init(parameters);
    
    final passwordBytes = utf8.encode(senhaComum);
    final result = Uint8List(32);
    argon2.generateBytes(passwordBytes, result, 0, result.length);
    
    final senhaHash = base64.encode(result);
    print('   ‚úì Hash gerado');

    // 4. Definir usu√°rios
    final usuarios = [
      {
        'nome': 'Henrique',
        'email': 'henrique@exemplo.com',
        'senha': senhaHash,
        'tipo': 'admin',
      },
      {
        'nome': 'Leonardo',
        'email': 'leonardo@exemplo.com',
        'senha': senhaHash,
        'tipo': 'user',
      },
      {
        'nome': 'Gon√ßalo',
        'email': 'goncalo@exemplo.com',
        'senha': senhaHash,
        'tipo': 'tecnico',
      },
      {
        'nome': 'Duarte',
        'email': 'duarte@exemplo.com',
        'senha': senhaHash,
        'tipo': 'tecnico',
      },
      {
        'nome': 'Francisco',
        'email': 'francisco@exemplo.com',
        'senha': senhaHash,
        'tipo': 'user',
      },
      {
        'nome': 'Admin',
        'email': 'admin@exemplo.com',
        'senha': senhaHash,
        'tipo': 'admin',
      },
    ];

    // 5. Inserir usu√°rios
    print('\nüë• Criando usu√°rios...\n');
    for (var user in usuarios) {
      await db.insert('usuarios', user);
      print('   ‚úì ${user['nome']} (${user['tipo']}) - ${user['email']}');
    }

    // 6. Verificar inser√ß√£o
    print('\nüìä Verificando usu√°rios criados:\n');
    final queryResult = await db.query('usuarios', orderBy: 'tipo, nome');
    
    print('‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó');
    print('‚ïë  ID ‚îÇ Nome          ‚îÇ Email                  ‚îÇ Tipo      ‚ïë');
    print('‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£');
    
    for (var row in queryResult) {
      final id = row['id'].toString().padRight(3);
      final nome = row['nome'].toString().padRight(13);
      final email = row['email'].toString().padRight(22);
      final tipo = row['tipo'].toString().padRight(9);
      print('‚ïë  $id ‚îÇ $nome ‚îÇ $email ‚îÇ $tipo ‚ïë');
    }
    
    print('‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù');

    print('\n‚úÖ Popula√ß√£o conclu√≠da com sucesso!');
    print('\nüìù Detalhes:');
    print('   ‚Ä¢ Total de usu√°rios: ${queryResult.length}');
    print('   ‚Ä¢ Administradores: ${queryResult.where((u) => u['tipo'] == 'admin').length}');
    print('   ‚Ä¢ T√©cnicos: ${queryResult.where((u) => u['tipo'] == 'tecnico').length}');
    print('   ‚Ä¢ Usu√°rios normais: ${queryResult.where((u) => u['tipo'] == 'user').length}');
    print('\nüîë Senha padr√£o para TODOS os usu√°rios: $senhaComum');
    print('   (M√≠nimo 12 caracteres, mai√∫scula, min√∫scula, n√∫mero, especial)');
    print('\n‚ö†Ô∏è  IMPORTANTE: Altere as senhas ap√≥s o primeiro login!');

  } catch (e) {
    print('\n‚ùå Erro ao popular base de dados: $e');
    exit(1);
  } finally {
    await db.close();
  }
}
